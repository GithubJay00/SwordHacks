local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Player = Players.LocalPlayer
local Character = Player.Character
local Humanoid = Character and Character:FindFirstChild("Humanoid")

getgenv().SelectedOption = nil
getgenv().range = nil
getgenv().ReachToggle = nil

function Select()
	if getgenv().SelectedOption == "FireTouchInterest" and getgenv().ReachToggle == true then
		RunService.Stepped:Connect(function()
			for _, p in pairs(Players:GetPlayers()) do
				if p.Name ~= Player.Name then

					local pchar = p.Character
					local phrp = pchar and pchar:FindFirstChild("HumanoidRootPart")

					local char = Player.Character
					local hrp = char:WaitForChild("HumanoidRootPart")

					local limbs = {
						RightArm = pchar:FindFirstChild("Right Arm"),
						LeftArm = pchar:FindFirstChild("Left Arm"),
						RightLeg = pchar:FindFirstChild("Right Leg"),
						LeftLeg = pchar:FindFirstChild("Left Leg"),
						Torso = pchar:FindFirstChild("Torso"),
						HumanoidRootPart = pchar:FindFirstChild("HumanoidRootPart"),
						Head = pchar:FindFirstChild("Head")
					}

					local Distance = (hrp.Position - phrp.Position).Magnitude
					if Distance <= getgenv().range then
						local tool = char and char:FindFirstChildOfClass("Tool")
						local Handle = tool and tool:FindFirstChild("Handle")
						if tool and Handle then
							tool:Activate()

							firetouchinterest(limbs.HumanoidRootPart, Handle, 0)
							firetouchinterest(limbs.HumanoidRootPart, Handle, 1)

						end
					end
				end
			end
		end)
		
	elseif getgenv().SelectedOption == "C-Bring" and getgenv().ReachToggle == true then
		RunService.Stepped:Connect(function()
			for _, p in ipairs(Players:GetPlayers()) do
				if p.name ~= Player.name and Humanoid and Humanoid.Health ~= 0 then

					local Tool = Player:FindFirstChildOfClass("Tool") or Character:FindFirstChildWhichIsA("Tool")
					local Handle = Tool and Tool:FindFirstChild("Handle")

					local pCharacter = p.Character

					if Tool and Handle and pCharacter and pCharacter:FindFirstChild("HumanoidRootPart") then
						local distance = (Character.HumanoidRootPart.Position - pCharacter.HumanoidRootPart.Position).Magnitude
						if distance <= getgenv().range then

							Tool:Activate()

							local limbs = {
								pCharacter:FindFirstChild("Left Arm"),
								pCharacter:FindFirstChild("Right Arm"),
								pCharacter:FindFirstChild("Left Leg"),
								pCharacter:FindFirstChild("Right Leg")
							}

							for _, limb in ipairs(limbs) do
								if limb then
									limb:BreakJoints()
									limb.CFrame = Handle.CFrame
									limb.Transparency = 1
									limb.CanCollide = false
								end
							end
						end
					end
				end
			end
		end)
	end
end

local Window = Rayfield:CreateWindow({
	Name = "SwordHacks",
	Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
	LoadingTitle = "SwordHacks",
	LoadingSubtitle = "by aaa000798",
	ShowText = " ", -- for mobile users to unhide rayfield, change if you'd like
	Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes

	ToggleUIKeybind = "K", -- The keybind to toggle the UI visibility (string like "K" or Enum.KeyCode)

	DisableRayfieldPrompts = false,
	DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

	ConfigurationSaving = {
		Enabled = true,
		FolderName = nil, -- Create a custom folder for your hub/game
		FileName = "SwordHacks"
	},

	Discord = {
		Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
		Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
		RememberJoins = true -- Set this to false to make them join the discord every time they load it up
	},

	KeySystem = false, -- Set this to true to use our key system
	KeySettings = {
		Title = "Untitled",
		Subtitle = "Key System",
		Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
		FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
		SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
		GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
		Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
	}
})


local MainTab = Window:CreateTab("Main", nil) -- Title, Image

local ReachSection = MainTab:CreateSection("Reach")

local ReachToggle = MainTab:CreateToggle({
	Name = "Reach",
	CurrentValue = false,
	Flag = "ReachToggle", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(ReachValue)
		getgenv().ReachToggle = ReachValue
	end,
})

local Dropdown = MainTab:CreateDropdown({
	Name = "Reach Type",
	Options = {"FireTouchInterest","C-Bring"},
	CurrentOption = {"FireTouchInterest"},
	MultipleOptions = false,
	Flag = "ReachSelect", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Options)
		getgenv().SelectedOption = Options
		Select()
	end,
})

local ReachSlider = MainTab:CreateSlider({
	Name = "Range",
	Range = {1, 20},
	Increment = 1,
	Suffix = "Radius",
	CurrentValue = 10,
	Flag = "RangeSlider", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(RangeValue)
		getgenv().range = RangeValue
	end,
})



local VisualSection = MainTab:CreateSection("Visuals")

local VisualToggle = MainTab:CreateToggle({
	Name = "Reach Visualizer",
	CurrentValue = false,
	Flag = "VisualToggle", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(VisualValue)
		if VisualValue == true then
			
			local player = game.Players.LocalPlayer
			local character = player.Character

			local tool = character and character:FindFirstChildOfClass("Tool")
			local Handle = tool and tool:FindFirstChild("Handle")

			local visualPart = Instance.new("Part")
			visualPart.Parent = Handle
			visualPart.Name = "VisualPart"
			visualPart.Anchored = true
			visualPart.CanCollide = false
			visualPart.CastShadow = false
			visualPart.Shape = "Ball"
			visualPart.Color = Color3.fromRGB(0, 0, 0)
			visualPart.Transparency = 0.6
			visualPart.Material = "ForceField"

			RunService.Stepped:Connect(function()
				visualPart.CFrame = Handle.CFrame
				visualPart.Size = Vector3.new(getgenv().range, getgenv().range, getgenv().range)
			end)
		end
		
		if VisualValue == false then
			
			local player = game.Players.LocalPlayer
			local character = player.Character

			local tool = character and character:FindFirstChildOfClass("Tool")
			local Handle = tool and tool:FindFirstChild("Handle")
			
			local visualPart = Handle:FindFirstChild("VisualPart")
			visualPart.Transparency = 1
		end
	end,
})



local DamageSection = MainTab:CreateSection("Damage")

local DamageToggle = MainTab:CreateToggle({
	Name = "Damage",
	CurrentValue = false,
	Flag = "DamageToggle", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		-- The function that takes place when the toggle is pressed
		-- The variable (Value) is a boolean on whether the toggle is true or false
	end,
})

local DamageSlider = MainTab:CreateSlider({
	Name = "DamageX",
	Range = {1.0, 2.0},
	Increment = 0.1,
	Suffix = "X",
	CurrentValue = 1.0,
	Flag = "DamageSlider", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		-- The function that takes place when the slider changes
		-- The variable (Value) is a number which correlates to the value the slider is currently at
	end,
})
