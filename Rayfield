local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()


if game.PlaceId == 6361937392 then
	
	local ReplicatedFirst = game:GetService("ReplicatedFirst")
	
	local sm = ReplicatedFirst:FindFirstChild("Static"):FindFirstChild("Superman")
	local Stats1 = ReplicatedFirst:FindFirstChild("Prod"):FindFirstChild("Stats")
	local SH = ReplicatedFirst:FindFirstChild("Static"):FindFirstChild("UIScaleHandler")
	
	if sm and Stats1 and SH then
		sm.Parent = nil
		Stats1.Parent = nil
		SH.Parent = nil
	end
end



getgenv().Settings = {
	
	ReachToggle = nil ,

	Range = 6 ,
	
	ReachToggleVisualizer = nil ,
	
	SwordVisualColor = Color3.fromRGB(0, 0, 0) ,
	
	

	AmpToggle = nil , 
	
	BlatantAmpToggle = nil,

	Damage = 2 , 
	
	
	
	HitboxToggle = nil , 
	
	HitboxSize = 5.5 , 
	
	HitboxVisual = nil ,
	
	HitboxColor = Color3.fromRGB(0, 0, 0)
	
}



local VisualP = Instance.new("Part")
VisualP.Anchored = true
VisualP.CanCollide = false
VisualP.CastShadow = false
VisualP.Transparency = 0.9
VisualP.Material = Enum.Material.Neon
VisualP.Shape = "Ball"



local Window = Rayfield:CreateWindow({
	Name = "SwordCloset",
	Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
	LoadingTitle = "SCWare",
	LoadingSubtitle = "aaa000798 DC",
	ShowText = " ", -- for mobile users to unhide rayfield, change if you'd like
	Theme = {
		TextColor = Color3.fromRGB(240, 240, 240),

		Background = Color3.fromRGB(20, 20, 20),
		Topbar = Color3.fromRGB(34, 34, 34),
		Shadow = Color3.fromRGB(20, 20, 20),

		NotificationBackground = Color3.fromRGB(20, 20, 20),
		NotificationActionsBackground = Color3.fromRGB(230, 230, 230),

		TabBackground = Color3.fromRGB(20, 20, 20),
		TabStroke = Color3.fromRGB(85, 85, 85),
		TabBackgroundSelected = Color3.fromRGB(210, 210, 210),
		TabTextColor = Color3.fromRGB(240, 240, 240),
		SelectedTabTextColor = Color3.fromRGB(50, 50, 50),

		ElementBackground = Color3.fromRGB(35, 35, 35),
		ElementBackgroundHover = Color3.fromRGB(40, 40, 40),
		SecondaryElementBackground = Color3.fromRGB(25, 25, 25),
		ElementStroke = Color3.fromRGB(50, 50, 50),
		SecondaryElementStroke = Color3.fromRGB(40, 40, 40),

		SliderBackground = Color3.fromRGB(30, 30, 30),
		SliderProgress = Color3.fromRGB(150, 150, 150),
		SliderStroke = Color3.fromRGB(80, 80, 80),

		ToggleBackground = Color3.fromRGB(30, 30, 30),
		ToggleEnabled = Color3.fromRGB(210, 210, 210),
		ToggleDisabled = Color3.fromRGB(150, 150, 150),
		ToggleEnabledStroke = Color3.fromRGB(255, 255, 255),
		ToggleDisabledStroke = Color3.fromRGB(125, 125, 125),
		ToggleEnabledOuterStroke = Color3.fromRGB(255, 255, 255),
		ToggleDisabledOuterStroke = Color3.fromRGB(125, 125, 125),

		DropdownSelected = Color3.fromRGB(100, 100, 100),
		DropdownUnselected = Color3.fromRGB(20, 20, 20),

		InputBackground = Color3.fromRGB(30, 30, 30),
		InputStroke = Color3.fromRGB(65, 65, 65),
		PlaceholderColor = Color3.fromRGB(178, 178, 178)
	}, -- Check https://docs.sirius.menu/rayfield/configuration/themes

	ToggleUIKeybind = "K", -- The keybind to toggle the UI visibility (string like "K" or Enum.KeyCode)

	DisableRayfieldPrompts = true,
	DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

	ConfigurationSaving = {
		Enabled = true,
		FolderName = nil, -- Create a custom folder for your hub/game
		FileName = "SwordHacks"
	},

	Discord = {
		Enabled = true, -- Prompt the user to join your Discord server if their executor supports it
		Invite = "NAtNjfvjtr", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
		RememberJoins = true -- Set this to false to make them join the discord every time they load it up
	},

	KeySystem = false, -- Set this to true to use our key system
	KeySettings = {
		Title = "Untitled",
		Subtitle = "Key System",
		Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
		FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
		SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
		GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
		Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
	}
})




local MainTab = Window:CreateTab("Main📃", nil) -- Title, Image


local ReachSection = MainTab:CreateSection("Reach")

local ReachToggleButton = MainTab:CreateToggle({
	Name = "Reach",
	CurrentValue = false,
	Flag = "ReachToggle", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(ReachToggleValue)
		Settings.ReachToggle = ReachToggleValue
	end,
})


local ReachSlider = MainTab:CreateSlider({
	Name = "Range",
	Range = {1, 20},
	Increment = 0.1,
	Suffix = "Radius",
	CurrentValue = 6,
	Flag = "RangeSlider", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(RangeValue)
		Settings.Range = RangeValue
	end,
})


local ReachVisualToggle = MainTab:CreateToggle({
	Name = "Reach Visualizer",
	CurrentValue = false,
	Flag = "VisualToggle", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(VisualValue)
		Settings.ReachToggleVisualizer = VisualValue
	end,
})


local ReachColorPicker = MainTab:CreateColorPicker({
	Name = "Color",
	Color = Color3.fromRGB(0, 0, 0),
	Flag = "SwordVisualColorPicker", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(SwordVisualColorValue)
		Settings.SwordVisualColor = SwordVisualColorValue
	end
})




local DamageSection = MainTab:CreateSection("Damage")

local DamageToggleButton = MainTab:CreateToggle({
	Name = "Damage",
	CurrentValue = false,
	Flag = "DamageToggle", 
	Callback = function(DamageToggleValue)
		Settings.AmpToggle = DamageToggleValue
	end,
})


local BlatantDamageToggleButton = MainTab:CreateToggle({
	Name = "Damage(Blatant)",
	CurrentValue = false,
	Flag = "BlatantDamageToggle", 
	Callback = function(BlatantDamageToggleValue)
		Settings.BlatantAmpToggle = BlatantDamageToggleValue
	end,
})


local DamageSlider = MainTab:CreateSlider({
	Name = "Damage Amount",
	Range = {1, 10},
	Increment = 1,
	Suffix = "  (Lower = DMG)",
	CurrentValue = 2,
	Flag = "DamageSlider", 
	Callback = function(DamageValue)
		Settings.Damage = DamageValue
	end,
})




local HitboxSection = MainTab:CreateSection("Hitbox")

local HitboxToggleButton = MainTab:CreateToggle({
	Name = "Hitbox Toggle",
	CurrentValue = false,
	Flag = "HitboxToggle", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(HitboxToggleValue)
		Settings.HitboxToggle = HitboxToggleValue
	end,
})


local HitboxSlider = MainTab:CreateSlider({
	Name = "Size",
	Range = {1, 20},
	Increment = 0.1,
	Suffix = "Htibox",
	CurrentValue = 5.5,
	Flag = "HitboxSlider", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(HitboxSliderValue)
		Settings.HitboxSize = HitboxSliderValue
	end,
})


local HitboxVisualToggle = MainTab:CreateToggle({
	Name = "Hitbox Visual",
	CurrentValue = false,
	Flag = "HitboxVisual", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(HitboxVisualValue)
		Settings.HitboxVisual = HitboxVisualValue
	end,
})

local HtiboxColorPicker = MainTab:CreateColorPicker({
	Name = "Hitbox Color",
	Color = Color3.fromRGB(0, 0, 0),
	Flag = "HitboxColor1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(HitbotColorValue)
		Settings.HitboxColor = HitbotColorValue
	end
})






local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local StarterGui = game:GetService("StarterGui")
local player = Players.LocalPlayer


RunService.Stepped:Connect(function()

	if Settings.ReachToggle then

		for _, p in pairs(Players:GetPlayers()) do
			if p.Name ~= player.Name then

				local qChar = p.Character
				local qHRP = qChar and qChar:FindFirstChild("HumanoidRootPart")
				local qHM = qChar and qChar:FindFirstChildOfClass("Humanoid")

				local Char = player.Character
				local HRP = Char and Char:FindFirstChild("HumanoidRootPart")
				local HM = Char and Char:FindFirstChildOfClass("Humanoid")

				if HM and qHM then
					if HM.Health > 0 and qHM.Health > 0 then


						local limbs1 = {
							RightArm = qChar:FindFirstChild("Right Arm") ,

							LeftArm = qChar:FindFirstChild("Left Arm") ,

							RightLeg = qChar:FindFirstChild("Right Leg") ,

							LeftLeg = qChar:FindFirstChild("Left Leg") ,

							Torso = qChar:FindFirstChild("Torso") ,

							HumanoidRootPart = qChar:FindFirstChild("HumanoidRootPart") ,

							Head = qChar:FindFirstChild("Head")
						}
						

						local tool = Char and Char:FindFirstChildOfClass("Tool")
						local Handle = tool and tool:FindFirstChild("Handle")

						if tool and Handle then

							local Distance = (Handle.Position - qHRP.Position).Magnitude
							if Distance <= Settings.Range then
								
								if Settings.AmpToggle then
									for _, Child in pairs(qChar:GetChildren()) do
										for _ = 1, Settings.Damage do
											if Child:IsA("BasePart") then
												firetouchinterest(Child, Handle, 0)
												firetouchinterest(Child, Handle, 1)
												firetouchinterest(Child, Handle, 0)
											end
										end
									end
								else
									local Qhrp = limbs1.HumanoidRootPart
									firetouchinterest(Qhrp, Handle, 0)
									firetouchinterest(Qhrp, Handle, 1)
								end
				
							end
						end
					end
				end
			end
		end
	end
end)



local function Whitelist()
	
	local WLD = {}
	
	for _, p in pairs(Players:GetPlayers()) do
		if p.Name ~= player.Name then
			
			local qchar = p.Character
			
			if qchar then
				for _, dta in pairs(qchar:GetChildren()) do
					if dta:IsA("BasePart") then
						
						table.insert(WLD, dta)
					end
				end
			end
		end
	end
	return WLD
end



RunService.Stepped:Connect(function()
	
	if Settings.AmpToggle then
		
		if not Settings.BlatantAmpToggle then
			
			if not Settings.ReachToggle then

				for _, p in pairs(Players:GetPlayers()) do
					if p.Name ~= player.Name then

						local qChar = p.Character
						local qHM = qChar and qChar:FindFirstChildOfClass("Humanoid")

						local Char = player.Character
						local HM = Char and Char:FindFirstChildOfClass("Humanoid")

						if HM and qHM then
							if HM.Health > 0 and qHM.Health > 0 then

								local tool = Char and Char:FindFirstChildOfClass("Tool")
								local Handle = tool and tool:FindFirstChild("Handle")

								if tool and Handle then

									--print("legit amp mode")
									for _, hit in pairs(Handle:GetTouchingParts()) do
										if hit == Whitelist() then
											for _, Child in pairs(qChar:GetChildren()) do
												for _ = 1, Settings.Damage do
													if Child:IsA("BasePart") then
														firetouchinterest(Child, Handle, 0)
														firetouchinterest(Child, Handle, 1)
														firetouchinterest(Child, Handle, 0)
													end
												end
											end
										end
									end

								end
							end
						end
					end
				end

			end
		end
	end
end)



RunService.Stepped:Connect(function()

	if Settings.BlatantAmpToggle then
		
		if not Settings.AmpToggle then
			
			if not Settings.ReachToggle then

				for _, p in pairs(Players:GetPlayers()) do
					if p.Name ~= player.Name then

						local qChar = p.Character
						local qHM = qChar and qChar:FindFirstChildOfClass("Humanoid")

						local Char = player.Character
						local HM = Char and Char:FindFirstChildOfClass("Humanoid")

						if HM and qHM then
							if HM.Health > 0 and qHM.Health > 0 then

								local tool = Char and Char:FindFirstChildOfClass("Tool")
								local Handle = tool and tool:FindFirstChild("Handle")

								if tool and Handle then

									--print("Blatant amp mode")
									for _, hit in pairs(Handle:GetTouchingParts()) do
										if hit:IsA("BasePart") then
											if hit.Parent ~= Char then
												for _, Child in pairs(qChar:GetChildren()) do
													for _ = 1, Settings.Damage do
														if Child:IsA("BasePart") then
															firetouchinterest(Child, Handle, 0)
															firetouchinterest(Child, Handle, 1)
															firetouchinterest(Child, Handle, 0)
														end
													end
												end
											end
										end
									end

								end
							end
						end
					end
				end

			end
		end
	end
end)




RunService.Stepped:Connect(function()
	if Settings.ReachToggle then
		
		local Character = player.Character

		local Tool = Character and Character:FindFirstChildOfClass("Tool")
		if not Tool then VisualP.Parent = nil end

		if Tool then
			local handle = Tool and Tool:FindFirstChild("Handle")

			if handle then

				if Settings.ReachToggleVisualizer then
					VisualP.Parent = workspace
					VisualP.Size = Vector3.new(Settings.Range, Settings.Range, Settings.Range)
					VisualP.CFrame = handle.CFrame
				else
					VisualP.Parent = nil
				end
			end
		end
	end
end)

RunService.RenderStepped:Connect(function()
	if VisualP then
		VisualP.Color = Settings.SwordVisualColor
	end
end)





RunService.Stepped:Connect(function()
	if Settings.HitboxToggle then
		for _, p in pairs(Players:GetPlayers()) do
			if p.Name ~= player.Name then
				pcall(function()

					local qChar = p.Character
					local qHRP = qChar and qChar:FindFirstChild("HumanoidRootPart")

					qHRP.Size = Vector3.new(Settings.HitboxSize, Settings.HitboxSize, Settings.HitboxSize)

					qHRP.CanCollide = false
					
				end)
			end
		end
	else
		for _, p in pairs(Players:GetPlayers()) do
			if p.Name ~= player.Name then
				pcall(function()

					local qChar = p.Character
					local qHRP = qChar and qChar:FindFirstChild("HumanoidRootPart")

					qHRP.Size = Vector3.new(2, 2, 1)

					qHRP.CanCollide = false

				end)
			end
		end
	end
end)


RunService.Stepped:Connect(function()
	
	if Settings.HitboxVisual then
		for _, p in pairs(Players:GetPlayers()) do
			if p.Name ~= player.Name then
				pcall(function()
					local qChar = p.Character
					local qHRP = qChar and qChar:FindFirstChild("HumanoidRootPart")

					qHRP.Transparency = 0.7
				end)
			end
		end
		
	else
		
		for _, p in pairs(Players:GetPlayers()) do
			if p.Name ~= player.Name then
				pcall(function()
					local qChar = p.Character
					local qHRP = qChar and qChar:FindFirstChild("HumanoidRootPart")

					qHRP.Transparency = 1
				end)
			end
		end
	end
	
end)

RunService.RenderStepped:Connect(function()
	for _, p in pairs(Players:GetPlayers()) do
		if p.Name ~= player.Name then
			pcall(function()
				local qChar = p.Character
				local qHRP = qChar and qChar:FindFirstChild("HumanoidRootPart")

				qHRP.Color = Settings.HitboxColor
			end)
		end
	end
end)









getgenv().Settings2 = {
	
	LungeBotToggled = nil ,
	LungeBotRange = 5 , 
	
	
	AimbotToggled = nil , 
	AimbotSliderValue = 5 ,
	AimbotTargetPart = "Torso" ,
	AimbotOffset = 0 ,
	
	
	JumpbotToggle = nil , 
	JumpbotRange = 5
	
}



local PlayerTab = Window:CreateTab("Player🚹", nil) -- Title, Image


local BotsSection = PlayerTab:CreateSection("AutoBots")

local LungeToggle = PlayerTab:CreateToggle({
	Name = "Lunge Bot",
	CurrentValue = false,
	Flag = "LungeBotToggle", 
	Callback = function(LungeBotValue)
		Settings2.LungeBotToggled = LungeBotValue
	end,
})

local LungeBotSlider = PlayerTab:CreateSlider({
	Name = "Lunge Range",
	Range = {1, 100},
	Increment = 0.1,
	Suffix = "Range",
	CurrentValue = 5,
	Flag = "LungeBotSlider",
	Callback = function(LungeBotSliderValue)
		Settings2.LungeBotRange = LungeBotSliderValue
	end,
})





local JumpBotSection = PlayerTab:CreateSection("JumpBot")

local JumpBotToggleButton = PlayerTab:CreateToggle({
	Name = "Jumpbot",
	CurrentValue = false,
	Flag = "JumpbotToggle1", 
	Callback = function(JumpbotValue)
		Settings2.JumpbotToggle = JumpbotValue
	end,
})

local JumpBotSlider = PlayerTab:CreateSlider({
	Name = "Jump Range",
	Range = {1, 100},
	Increment = 0.1,
	Suffix = "Radius",
	CurrentValue = 5,
	Flag = "jumpbotSlider1", 
	Callback = function(JumpbotSliderValue)
		Settings2.JumpbotRange = JumpbotSliderValue
	end,
})





local AimbotSection = PlayerTab:CreateSection("Aimbot")

local AimbotToggle = PlayerTab:CreateToggle({
	Name = "Aimbot",
	CurrentValue = false,
	Flag = "AimbotToggle",
	Callback = function(AimbotToggleValue)
		Settings2.AimbotToggled = AimbotToggleValue
	end,
})

local AimbotPartDropDown = PlayerTab:CreateDropdown({
	Name = "Target Part",
	Options = { "Right Arm", "Torso", "Left Arm" },
	CurrentOption = {"Torso"},
	MultipleOptions = false,
	Flag = "TPartDropdown", 
	Callback = function(TargetPart)
		Settings2.AimbotTargetPart = TargetPart
	end,
})

local AimbotSlider = PlayerTab:CreateSlider({
	Name = "Aimbot radius",
	Range = {1, 100},
	Increment = 0.1,
	Suffix = "Distance",
	CurrentValue = 5,
	Flag = "AimbotSlider1", 
	Callback = function(AimbotDistanceValue)
		Settings2.AimbotSliderValue = AimbotDistanceValue
	end,
})

local AimbotOffsetSlider = PlayerTab:CreateSlider({
	Name = "Aimbot Offset",
	Range = {0, 100},
	Increment = 0.1,
	Suffix = "Offset",
	CurrentValue = 0,
	Flag = "AimbotOffsetSlider", 
	Callback = function(AimbotOffsetValue)
		Settings2.AimbotOffset = AimbotOffsetValue
	end,
})





RunService.Stepped:Connect(function()
	if Settings2.LungeBotToggled then
		for _, p in pairs(Players:GetPlayers()) do
			if p.Name ~= player.Name then
				
				local pChar = p.Character
				local pHRP = pChar and pChar:FindFirstChild("HumanoidRootPart")
				local pHM = pChar and pChar:FindFirstChildOfClass("Humanoid")

				local Char = player.Character
				local HRP = Char and Char:FindFirstChild("HumanoidRootPart")
				local HM = Char and Char:FindFirstChildOfClass("Humanoid")

				if HM and pHM then
					if HM.Health > 0 and pHM.Health > 0 then
						
						local tool = Char and Char:FindFirstChildOfClass("Tool")
						local Handle = tool and tool:FindFirstChild("Handle")

						if tool and Handle then
							local Distance = (Handle.Position - pHRP.Position).Magnitude
							if Distance <= Settings2.LungeBotRange then
								pcall(function()
									tool:Activate()
								end)
							end
						end
					end
				end
			end
		end
	end
end)



RunService.Stepped:Connect(function()
	if Settings2.AimbotToggled then
		
		local Char = player.Character

		if not Char or not Char:FindFirstChild("HumanoidRootPart") or not Char:FindFirstChild("Humanoid") then return end


		local Target = nil
		local Radius = Settings2.AimbotSliderValue

		for _, p in ipairs(Players:GetPlayers()) do
			if p ~= player and p.Character and p.Character:FindFirstChild("HumanoidRootPart") and p.Character:FindFirstChild("Humanoid").Health ~= 0 then

				local pChar = p.Character
				local Distance = (Char:FindFirstChild("HumanoidRootPart").Position - pChar:FindFirstChild("HumanoidRootPart").Position).Magnitude

				if Distance < Radius then
					Radius = Distance
					Target = pChar:FindFirstChild(Settings2.AimbotTargetPart)
				end
			end
		end


		if Target then
			local CharPos = Char:FindFirstChild("HumanoidRootPart").Position
			local TargetPos = Target.Position
			local Direction = Vector3.new(TargetPos.X, CharPos.Y, TargetPos.Z)
			Char:FindFirstChild("HumanoidRootPart").CFrame = CFrame.new(CharPos, Direction + Vector3.new(Settings2.AimbotOffset, 0, 0))
		end
	end
end)



RunService.Stepped:Connect(function()
	if Settings2.JumpbotToggle then
		for _, p in pairs(Players:GetPlayers()) do
			if p.Name ~= player.Name then

				local pChar = p.Character
				local pHRP = pChar and pChar:FindFirstChild("HumanoidRootPart")
				local pHM = pChar and pChar:FindFirstChildOfClass("Humanoid")

				local Char = player.Character
				local HRP = Char and Char:FindFirstChild("HumanoidRootPart")
				local HM = Char and Char:FindFirstChildOfClass("Humanoid")

				local Distance = (HRP.Position - pHRP.Position).Magnitude
					
				if Distance <= Settings2.JumpbotRange then
					if HM and pHM then
						if HM.Health > 0 and pHM.Health > 0 then
							if pHM.Jumping then
								HM.Jump = true
							end
						end
					end
				end
			end
		end
	end
end)







getgenv().Settings3 = {
	
	guiToggle = nil
	
}





local MiscTab = Window:CreateTab("Misc⚙️", nil) -- Title, Image


local MainMiscSection = MiscTab:CreateSection("Misc Main")

local GuiToggle = MiscTab:CreateToggle({
	Name = "hide GUI",
	CurrentValue = false,
	Flag = "guiHideToggle",
	Callback = function(HideGuiToggleValue)
		Settings3.guiToggle = HideGuiToggleValue
	end,
})




local Section = MiscTab:CreateSection("Spoof")




local Section = MiscTab:CreateSection("GUI")







RunService.RenderStepped:Connect(function()
	
	if game.PlaceId == 6361937392 then
		 _G.playerGui = player:FindFirstChild("PlayerGui")
		_G.UIF = _G.playerGui:FindFirstChild("UserInterface")
		_G.Menus = _G.UIF:FindFirstChild("Menus")
		
		if Settings3.guiToggle then

			if _G.Menus:FindFirstChild("Store") then
				if _G.Menus:FindFirstChild("Store").Position == UDim2.new(0.5, 0, 1.5, 0) then
					_G.Menus:FindFirstChild("Store").Visible = false
				else
					_G.Menus:FindFirstChild("Store").Visible = true
				end
			end


			if _G.Menus:FindFirstChild("Quests") then
				if _G.Menus:FindFirstChild("Quests").Position == UDim2.new(0.5, 0, 1.5, 0) then
					_G.Menus:FindFirstChild("Quests").Visible = false
				else
					_G.Menus:FindFirstChild("Quests").Visible = true
				end
			end


			if _G.Menus:FindFirstChild("Inventory") then
				if _G.Menus:FindFirstChild("Inventory").Position == UDim2.new(0.5, 0, 1.5, 0) then
					_G.Menus:FindFirstChild("Inventory").Visible = false
				else
					_G.Menus:FindFirstChild("Inventory").Visible = true
				end
			end


			if _G.Menus:FindFirstChild("Index") then
				if _G.Menus:FindFirstChild("Index").Position == UDim2.new(0.5, 0, 1.5, 0) then
					_G.Menus:FindFirstChild("Index").Visible = false
				else
					_G.Menus:FindFirstChild("Index").Visible = true
				end
			end


			if _G.Menus:FindFirstChild("BulkRewards") then
				if _G.Menus:FindFirstChild("BulkRewards").Position == UDim2.new(0.5, 0, 1.5, 0) then
					_G.Menus:FindFirstChild("BulkRewards").Visible = false
				else
					_G.Menus:FindFirstChild("BulkRewards").Visible = true
				end
			end


			if _G.Menus:FindFirstChild("Marketplace") then
				if _G.Menus:FindFirstChild("Marketplace").Position == UDim2.new(0.5, 0, 1.5, 0) then
					_G.Menus:FindFirstChild("Marketplace").Visible = false
				else
					_G.Menus:FindFirstChild("Marketplace").Visible = true
				end
			end


			if _G.Menus:FindFirstChild("Arcade") then
				if _G.Menus:FindFirstChild("Arcade").Position == UDim2.new(0.5, 0, 1.5, 0) then
					_G.Menus:FindFirstChild("Arcade").Visible = false
				else
					_G.Menus:FindFirstChild("Arcade").Visible = true
				end
			end


			if _G.Menus:FindFirstChild("Clans") then
				if _G.Menus:FindFirstChild("Clans").Position == UDim2.new(0.5, 0, 1.5, 0) then
					_G.Menus:FindFirstChild("Clans").Visible = false
				else
					_G.Menus:FindFirstChild("Clans").Visible = true
				end
			end


			if _G.Menus:FindFirstChild("UpdateLog") then
				if _G.Menus:FindFirstChild("UpdateLog").Position == UDim2.new(0.5, 0, 1.5, 0) then
					_G.Menus:FindFirstChild("UpdateLog").Visible = false
				else
					_G.Menus:FindFirstChild("UpdateLog").Visible = true
				end
			end
		end
		
	end
	
end)



Rayfield:LoadConfiguration()
